import * as OctokitTypes from "@octokit/types";
import LRUCache from "lru-cache";
import * as OAuthAppAuth from "@octokit/auth-oauth-app";
export declare type AnyResponse = OctokitTypes.OctokitResponse<any>;
export declare type EndpointDefaults = OctokitTypes.EndpointDefaults;
export declare type EndpointOptions = OctokitTypes.EndpointOptions;
export declare type RequestParameters = OctokitTypes.RequestParameters;
export declare type Route = OctokitTypes.Route;
export declare type RequestInterface = OctokitTypes.RequestInterface;
export declare type StrategyInterface = OctokitTypes.StrategyInterface<[
    StrategyOptions
], [
    AuthOptions
], Authentication>;
export declare type Cache = LRUCache<string, string> | {
    get: (key: string) => string;
    set: (key: string, value: string) => any;
};
export interface AppAuthStrategy {
    (options?: StrategyOptions): AppAuth;
}
export interface AppAuth {
    (options: AuthOptions): Promise<Authentication>;
}
export declare type APP_TYPE = "app";
export declare type TOKEN_TYPE = "token";
export declare type INSTALLATION_TOKEN_TYPE = "installation";
export declare type OAUTH_TOKEN_TYPE = "oauth";
export declare type REPOSITORY_SELECTION = "all" | "selected";
export declare type JWT = string;
export declare type ACCESS_TOKEN = string;
export declare type UTC_TIMESTAMP = string;
export declare type AppAuthentication = {
    type: APP_TYPE;
    token: JWT;
    appId: number;
    expiresAt: string;
};
export declare type InstallationAccessTokenData = {
    token: ACCESS_TOKEN;
    createdAt: UTC_TIMESTAMP;
    expiresAt: UTC_TIMESTAMP;
    permissions: Permissions;
    repositorySelection: REPOSITORY_SELECTION;
    repositoryIds?: number[];
    singleFileName?: string;
};
export declare type CacheData = InstallationAccessTokenData;
export declare type InstallationAccessTokenAuthentication = InstallationAccessTokenData & {
    type: TOKEN_TYPE;
    tokenType: INSTALLATION_TOKEN_TYPE;
};
export declare type OAuthAppAuthentication = OAuthAppAuth.AppAuthentication;
export declare type GitHubAppUserAuthentication = OAuthAppAuth.GitHubAppUserAuthentication;
export declare type GitHubAppUserAuthenticationWithExpiration = OAuthAppAuth.GitHubAppUserAuthenticationWithExpiration;
export declare type Authentication = AppAuthentication | OAuthAppAuthentication | InstallationAccessTokenAuthentication | GitHubAppUserAuthentication | GitHubAppUserAuthenticationWithExpiration;
declare type OAuthStrategyOptions = {
    clientId?: string;
    clientSecret?: string;
};
declare type CommonStrategyOptions = {
    appId: number | string;
    privateKey: string;
    installationId?: number | string;
    request?: OctokitTypes.RequestInterface;
    cache?: Cache;
    log?: {
        warn: (message: string, additionalInfo?: object) => any;
        [key: string]: any;
    };
};
export declare type StrategyOptions = OAuthStrategyOptions & CommonStrategyOptions & {
    [key: string]: unknown;
};
export declare type FactoryOptions = Required<Omit<StrategyOptions, keyof State>> & State;
export declare type Permissions = {
    [name: string]: string;
};
export declare type AuthType = "app" | "installation" | "oauth" | "oauth-app" | "oauth-user";
export declare type AppAuthOptions = {
    type: "app";
};
export declare type InstallationAuthOptions = {
    type: "installation";
    installationId?: number | string;
    repositoryIds?: number[];
    permissions?: Permissions;
    refresh?: boolean;
    factory?: (options: FactoryOptions) => unknown;
    [key: string]: unknown;
};
export declare type OAuthAppAuthOptions = OAuthAppAuth.AppAuthOptions;
export declare type OAuthWebFlowAuthOptions = OAuthAppAuth.WebFlowAuthOptions;
export declare type OAuthDeviceFlowAuthOptions = OAuthAppAuth.GitHubAppDeviceFlowAuthOptions;
export declare type AuthOptions = AppAuthOptions | OAuthAppAuthOptions | InstallationAuthOptions | OAuthWebFlowAuthOptions | OAuthDeviceFlowAuthOptions;
export declare type WithInstallationId = {
    installationId: number;
};
export declare type State = Required<Omit<CommonStrategyOptions, "installationId">> & {
    installationId?: number;
} & OAuthStrategyOptions & {
    oauthApp: OAuthAppAuth.GitHubAuthInterface;
};
export {};
